import pybullet as p
import pybullet_data
import time
import math

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ô
def deg_to_rad(degrees):
    return degrees * (math.pi / 180)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤
def rad_to_deg(radians):
    return radians * (180 / math.pi)

# ‡πÄ‡∏£‡∏¥‡πà‡∏° PyBullet GUI
p.connect(p.GUI)
p.setAdditionalSearchPath(pybullet_data.getDataPath())

# ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
robot_id = p.loadURDF(r"C:\Users\Toey\Desktop\Assem_For_URDF_4\urdf\Assem_For_URDF_4.urdf", useFixedBase=True)

# ‡∏õ‡∏¥‡∏î Real-time simulation
p.setRealTimeSimulation(0)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠
num_joints = p.getNumJoints(robot_id)
print(f"Total Joints: {num_joints}")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠
joint_limits = {
    'joint1': (-134, 134),
    'joint2': (-90, 0),
    'joint3': (-90, 45),
    'joint4': (-180, 180),
    'joint5': (-90, 90), 
    'joint6': (-180, 180)
}

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å Joint ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0¬∞)
for i in range(num_joints):
    p.resetJointState(robot_id, i, 0)

# **‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏ï‡πà‡∏≠**
for joint_index in range(num_joints):
    joint_name = f"Joint {joint_index + 1}"
    lower_limit, upper_limit = joint_limits[f'joint{joint_index + 1}']
    
    print(f"\nüîç **Testing {joint_name}**")
    print(f"   Limits: {lower_limit}¬∞ to {upper_limit}¬∞")

    # **‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡∏´‡∏°‡∏∏‡∏ô‡∏à‡∏≤‡∏Å Lower ‡πÑ‡∏õ Upper ‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤**
    for angle in range(lower_limit, upper_limit + 1, 10):  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡∏•‡∏∞ 10¬∞
        rad_angle = deg_to_rad(angle)
        p.setJointMotorControl2(robot_id, joint_index, p.POSITION_CONTROL, targetPosition=rad_angle)
        p.stepSimulation()
        time.sleep(0.05)

    # **‡∏´‡∏°‡∏∏‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà 0¬∞**
    p.setJointMotorControl2(robot_id, joint_index, p.POSITION_CONTROL, targetPosition=0)
    for _ in range(30):
        p.stepSimulation()
        time.sleep(0.05)

    print(f"‚úÖ **{joint_name} Test Complete!**")

p.disconnect()
